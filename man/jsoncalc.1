.TH jsoncalc 1
.SH NAME
jsoncalc \- JSON calculator and reformatter

.SH SYNOPSIS
.B jsoncalc
.RI [ OPTION ] 
.RI [ file.jc ]
.RI [ "name\fB=\fIvalue" ]
.RI [ file.json ]...

.SH DESCRIPTION
.B jsoncalc
is a tool for examining or modifying JSON data.
It can be run interactively or in batch mode.
It integrates well with shell scripts.

.SH OPTIONS
The typical
.B --help
and
.B --version
options are supported.
Other than that, all options are short.
.TP
.BI -c command
Apply 
.I command
to the JSON data.
The JSON data will typically come from *.json files also given in the
command line.
Any results will be written to stdout.
This option can be repeated to supply multiple commands to run.

.TP
.BI -f scriptfile
Read an expression from a file, and apply it to the JSON data.
Again, the JSON data will typically come from *.json files named on the command line.
This option can be repeated to supply multiple script files to load.
You can also mix it with
.BI -c command
if you want.
.TP

Also, if the first file named after the last option appears to contain a
JsonCalc script instead of JSON data, then it will be loaded like
.BI -f file.

.TP
.BI -F scriptfile
Add
.I scriptfile
to a list of scripts to automatically load when running interactively.
This is persistent across interactive sessions.
Later, to persistently remove a script from that list, you can invoke
.B jsoncalc
with a
.BI -F- scriptfile
flag.
You can also use lowercase
.BI -f- scriptfile
to temporarily remove
.I scriptfile
from the list for a single session.

.TP
.B -i
Force interactive mode.
Usually interactive mode is implied by the lack of
.BI -c expression,
.BI -f file
or 
.BI -s settings,
but if you want to use some of those flags then 
.B -i
option makes it clear.

.TP
-u
This option allows JsonCalc to update any data files named on the command line,
if their data was changed via assignments.
This is often used when JsonCalc is constructing JSON documents from other data
sources such as environment variables or
.IB name = value
arguments on the shell command line.

.TP
.BR -o | -a
These affect JsonCalc's behavior when trying to load a file that doesn't exist.
Normally that's an error, but
.B -o
and
.B -a
cause it to load missing files as empty objects or arrays, respectively.
This can be handy if you're using JsonCalc to construct a JSON document
from scratch.
You'll usually want
.B -u
too.

.TP
.B -r
Restricted mode.
This inhibits some dangerous activities such as invoking an external shell
command, or reading/writing files not named on the command line.
This software is distributed with no guarantees of any kind.
And even if
.B jsoncalc
itself is perfect, plugins might not be.

.TP
.BI -d directory
Causes any unresolved names in an expression to be interpreted as
a request to load
.IR dir / name .json
as variable
.IR name .
For example, if you invoke JsonCalc with
.BI -d foo
and then use the name "bar" in an expression,
JsonCalc will load foo/bar.json into the "bar" variable.
This happens on demand; it doesn't proactively load all files in the "foo"
directory into variables.

.TP
.BI -D directory
This is like
.BI -d directory
except that uppercase
.BI -D directory
is persistent across interactive sessions.
If you want to remove a directory from the persistent list, put a "-" before
the directory name, as in
.BI -D- directory.
You can also use lowercase
.BI -d- directory
to temporarily remove it for one session only.

.TP
.BI -j flags
Sets debugging flags.
.I flags
is a string of letters representing the debugging features to enable.
The letters are
.B t
to output tokens as they're parsed,
.B f
for files as each chunk is read,
.B b
to output the remaining buffer,
.B a
to call abort() on a JSON error,
.B e
to output info for json_by_expr(), or
.B c
to output info for json_calc().

.TP
.BI -s settings
This controls the output format, colors, and some other features.
See the "SETTINGS" section, below.

.TP
.BI -S settings
This is like
.BI -s settings
except that uppercase
.BI -S settings
is persistent across interactive sessions.

.TP
.B -p
A single
.B -p
enables pretty-printing, where newlines and whitespace are added to the
JSON to show the structure of the data, and is equivalent to
.BR -sjson,pretty,oneline=0,noelem .
A double
.B -pp
is similar but uses
.B elem
to cause elements of an array to be output entirely on one line.
A triple
.B -ppp
outputs compact JSON.

.TP
.BI -l plugin [, settings ]
This loads a plugin.
Most plugins are binary files that get linked into
.B jsoncalc
at runtime, to provide new functions, commands, file formats, or other features.
Some plugins may be implemented in
.BR jsoncalc 's
scripting language.
If a plugin supports settings, then you can set them by appending them after
the plugin's name, with a comma as a delimiter.

.TP
.BI -L plugin [, settings ]
This is like
.BI -l plugin , settings
except that uppercase
.BI -L plugin , settings
is persistent across interactive sessions.
To remove a plugin from the persistent list, use a "-" before the plugin name,
as in
.BI -L- plugin .
You can also use lowercase
.BI -l- plugin
to temporarily remove a plugin from the persistent list for this session only.

.P
Note that the uppercase
.BI -F scriptfile,
.BI -D directory,
.BI -S settings,
and
.BI -L plugin
options are all like their corresponding lowercase option, except that
the uppercase versions are persistent across interactive invocations.
This can be very convenient.
They intentionally don't apply for batch-mode invocations because there
you want a consistent environment for the script to run in.
If a script needs certain scripts or plugins to be loaded, it should use an
.B import
or
.B plugin
command to explicitly say so.

.SH "INTERACTIVE VS. BATCH MODE"
.B jsoncalc
can run in interactive mode or in batch mode.
.P
The selection of mode depends on the command-line flags and arguments.
Using the
.B -i
flag always forces interactive mode, but without that it tries to guess.
If you use 
.BI -c expression,
.BI -f file,
.BI -s settings,
or
.B -p
then it will assume batch mode unless you give 
.BR -i .
If the first argument after the flags is a script file (not a JSON data file)
then that counts as a
.BI -f file
flag and will imply batch mode unless
.B -i
is also used.
.P
In interactive mode,
the first JSON data file named on the command line is loaded into a variable
named "data".
You can use the "file" command to switch to other files.
If no data files are named on the command line, then "data" will be null.
Any scripts or commands listed on the command line will be executed once,
after the first file is loaded.
.P
In batch mode, all data files are loaded, one after the other, and any
scripts or commands will be executed separately for each one.
If no data files are named on the command line, and stdin is a file or pipe,
then
.B jsoncalc
will read from stdin and write to stdout.
.P
Either way, any data files named on the command line will
.I not
be updated unless you also give a
.B -u
flag to enable updates.
This doesn't affect writing to stdout when no files are named on the command line.
.P
For convenience, interactive sessions can set some flags
.BI (-S settings,
.BI -F script,
and
.BI -L plugins )
persistently.
If you often need the "csv" plugin for your interactive sessions, you can
invoke
.B jsoncalc
once with a
.B -Lcsv
flag and then it'll always be loaded for your interactive sessions.
Later, if you decide you don't want to autoload the "csv" plugin, you
can remove it from the persistent list giving a
.B -L-csv
flag.
.P
In order to provide batch sessions with a consistent runtime environment,
persistent options
.I do not apply
to batch sessions.
Instead, your batch script should use
the "set", "import", and "plugin" commands to specify what runtime features it needs.
.P
Except, again for convenience, if stdout is a tty then even batch mode will
use the persistent settings for the "table", "color", and "graphic" options.
You can still override this via the
.BI -s settings
flag or the "set" command though.

.SH "SETTINGS"
The
.BI -s settings
option mostly controls the output format.
The
.I settings
is a series of names or
.IR name = value
pairs.
.P
Most settings are boolean.
You can turn them on just by giving their name, or turn them off by
 prepending "no" or "-" to the name.
For example,
.B -spretty
will enable pretty-printing, and
.B -snocolor
will disable colors in the output.
.P
Some options are strings that have a list of preferred values associated
with them.
You can give just the value, without a name, and
.B jsoncalc
will figure out which name it belongs to.
For example, there's a "table" setting with a list of preferred values that
includes "sh" (for a format that works well on shell scripts),
so if you want tables to be output in "sh" format, you could either say
.B -stable=sh
or simply
.B -ssh.

.P
The main output format options are:
.TS
c c l.
NAME	TYPE	MEANING
tab	number	Indentation to add for each layer while pretty-printing.
oneline	number	If >0, JSON data shorter than this won't pretty-print.
digits	number	Precision when converting floating point to text.
elem	boolean	For top-level arrays, output elements one-per-line.
table	string	One of csv/sh/grid/json to control table output.
string	boolean	If the output is a string, just output its text.
pretty	boolean	Add whitespace to show the structure of the data.
color	boolean	Enable the use of color on ANSI terminals.
ascii	boolean	Don't output non-ASCII characters; use \euXXXX instead.
prefix	string	For "sh" output, prepend this to variable names.
null	string	How to display null in "grid" format.
.TE
.P
Additionally, there are sections to select the color and other attributes of
certain types of text output.
These are whole objects, not simple strings/boolean/numbers.
The
.I settings
parser handles this pretty well, though.
When setting the value of an object, everything up to the next comma or
end of the setting is interpreted as a space-delimited list of settings within
that object.
For example, you can set the attributes of the column headers in the "grid"
table output format via a string such as "-sgridhead=italic underlined yellow".
The "italic" and "underlined" settings are boolean, and "yellow" is in the
preferred value list for the "fg" (foreground color) setting.
.P
The types of text that can have their attributes set this way include
.B result
(normal output),
.B error
(error messages),
.B debug
(debugging output),
.B gridhead
(column headings in "table=grid" format)
and
.B gridline
(Column separators in "table=grid").
Their attributes are:
.TS
c c l.
bold	boolean	Boldface or bright
dim	boolean	Dim
italic	boolean	Italic or oblique
underlined	boolean	A line under the text
linethru	boolean	A line through the midline of the text
blinking	boolean	Nasty blinking text
fg	string	Foreground color: normal, black, red, green, yellow, blue, magenta, cyan, or white
bg	string	Background color, like "fg" with with "on " prepended, such as "on red"
.TE
.P
Most plugins support options, stored in an object named
.BI plugin. pluginname .
The preferred way to adjust the settings for a plugin is to append the
settings after the plugin name when you're loading it, though you can also
set them via
.BI -splugin. pluginname = settings .
The same rules apply for settings in these objects, so for example you could
specify the "daily" rollover method for the "log" plugin via
.B -llog,rollover=daily
or
.B -llog,daily
or
.B -llog -splugin.log=daily.

.SS "SH OUTPUT"
The "sh" table output format deserves a bit more discussion.
Each row of the table will be output as a line of multiple
.IR name = value
pairs, giving the values for all columns of the table in that row.
In a shell script, you can read the lines and evaluate them one-by-one like this:
.nf
    jsoncalc -ssh -c scores sampledata/test.json | while read row
    do
        eval $row
        echo "$name earned $score points in run# $run"
    done
.fi
.P
If you expect the output to be a single object then you can use
.BR bash (1)'s
"$(...)" notation, like this:
.nf
    eval $(jsoncalc -ssh -c 'scores[name:"Paul"]' sampledata/test.json)
    echo "$name scored $score"
.fi

.SH "EXPRESSION SYNTAX"
The expression syntax resembles that of JavaScript expressions,
but with database-like extensions.
For a full description of the syntax, see the
JsonCalc web page.
In short, though, the extensions are:
.IP \ \(bu 3n
.IB array @ filter
and
.IB array @@ filter
operators to transform arrays.
.IP \ \(bu 3n
A
.IB table @= table,
.IB table @< table
and
.IB table @> table

database join operators.
.B @=
is natural join,
.B @<
is left join, and
.B @>
is right join.
A table is simply an array of objects.
.IP \ \(bu 3n
.IB table .orderBy( columns ),
.IB table .groupBy( columns ),
.IB array .flat( depth ), and
.IB table .unroll ( nest_list )
functions to organize arrays of objects.
.IP \ \(bu 3n
.IB expr .find( value )
to search for a value within a large data structure.
Also,
.IB table [ key:value ]
notation to locate return an element from an array of objects, based on the
contents of the object.
.IP \ \(bu 3n
Aggregate functions including
.IB min( expr ),
.IB max( expr ),
.IB avg( expr )
and
.IB count( expr ).
.IP \ \(bu 3n
A rather full-featured SQL "SELECT" statement.
.P
JsonCalc also implements many JavaScript operators, functions, and commands.
It does not support classes though, or functions that alter data such as
.BR array .splice().
.P.
It
.I does
allow you to write functions as though they were member functions though.
Whenever you write
.IB expr.func ( args ),
the
.I expr
is interpreted as the first argument to
.IB func ().
For example,
.B \"Hello".toUpperCase()
and
.B toUpperCase("Hello")
are exactly the same thing.

.SH "INVOCATION EXAMPLES"
.TP
jsoncalc
Start
.B jsoncalc
interactively, without any JSON data initially.

.TP
jsoncalc -lmath
Start
.B jsoncalc
interactively, with the "math" plugin loaded.
This adds nearly all of the functions and constants from JavaScript's Math class.
.TP
jsoncalc file.json
Start
.B jsoncalc
interactively using the contents of file.json as variable
.B data.

.TP
jsoncalc -d.
Start
.B jsoncalc
interactively.
Any *.json files in the directory "." can be accessed simply by using their
basename as a variable name, e.g. using the name
.I parts
in an expression would load the file
.I ./parts.json
into the
.I parts
variable.
.TP
jsoncalc -p file.json
Pretty-print file.json.
This is non-interactive because
.B -p
was used without
.BR -i .

.TP
jsoncalc -c 2+2
Start in batch mode, evaluate 2+2 to output 4, and then quit.

.TP
jsoncalc -u script.js data.json data2.json
Start in batch mode.
For each *.json data file, run the
.I script.js
script.
Because of the
.BR -u ,
if the script altered any the data from any of the *.json files,
they would updated to include those changes.

.SH "EXPRESSION EXAMPLES"
The following examples assume you invoked
.B jsoncalc
as "jsoncalc -dsampledata".

.TP
1+2*3
This outputs 7.
.B jsoncalc
makes a pretty decent calculator.

.TP
1..10
Output an array of integers from 1 to 10.

.TP
1..10@{n:this, \"n^2\":this*this}
For each element of the array, construct an object.
The @ operator loops over the elements from the left operand (an array)
and applies the right operand (an expression) to them with "this" set to
the array element's value.  The {...} notation is an object generator.
The result is an array of objects, which
.B jsoncalc
classifies as a table,
so it is output as a table.

.TP
"2024-12-25" + "P12D"
This is an example of ISO-8601 date/time/period calculation.
It adds 12 days to Christmas, returning "2025-01-06".
.B jsoncalc
makes date calculation easy.
(If the strings didn't look like a date and a period, they would have been
concatenated just as in JavaScript.
If you want to concatenate strings, no questions asked, then use the
concat() function.)

.TP
test
Output the contents of sampledata/test.json.

.TP
test.scores
Output the "scores" member of the object loaded from sampledata/test.json.
This is a table (array of objects) and the default interactive format is
to output tables in a human-readable grid, so it should look pretty.

.TP
test.scores.orderBy(["name","run"])
Output the same table, but sorted by name and run.

.TP
test.scores@run==1
Only output rows for run 1.
The @ and @@ operators take an array as the left operand and an expression
on the right to filter the array.
If the expression returns a boolean value, then the element is omitted or
kept.

.TP
test.scores@{run,score}
Only output the "run" and "score" columns.
If the right-hand operand of @ or @@ returns a value other than
.B null, true
or
.B false
then it is used instead of the array's element.

.TP
test.scores.groupBy("run")@{run,avgScore:avg(score)}
This groups the records by score, and then computes the average score
within each group.
.BI avg( x )
is an aggregate function, meaning it first accumulates data across all rows
of the data (or all in the group, in this case) and goes back and makes the
cumulative result available when evaluating each row.
The @ operator only adds one row per group.

.TP
test.scores.groupBy("run","total")@{run,avgScore:avg(score)}
The difference here is, groupBy() is passed an extra parameter that causes
an extra row to be added for showing the overall average.

.TP
"select run, avg(score) from test.scores group by run"
This uses an SQL "SELECT" command to extract basically the same information.
Note that SQL will choose a default name for a computed column.
Internally, the SQL "SELECT" is translated to
.BR jsoncalc "'s"
native expression syntax so it's about as efficient either way.

.TP
test.scores.groupBy("run")@@{run,avgScore:avg(score)}
The difference between @@ and @ is that when groups are used, @ only outputs one
value per group while @@ outputs one item per row.
In this example, we get a separate copy of each row for each name, even though
the name isn't included in the resulting rows.

.TP
test.scores.orderBy("name").groupBy("name")@{name,avgScore:avg(score)}
Compute the average score for each name.
Note that groupBy() only compares adjacent items when grouping, so we
need to explicitly sort by name before we can group by name.
This wasn't an issue when grouping by run because the data was already
sorted by run.

.TP
test..deepest
This outputs the value of test.deep.deeper.deepest,
which happens to be 3.
The ".." operator digs down through multiple layers of objects, if necessary,
to find the requested name.

.TP
test.cust[0].contact[type:"address"]
This looks in
.B text.cust[0].contact
(an array of objects)
for an element containing a member with the name "type" and value "address".
.TP
test.find(3)
This searches through test for all instances of the value 3, and lists
them as a table.
You can search for numbers, strings, or regular expressions (search patterns,
see regex(7) in the Linux manual).

.TP
emojis
Output the contents of sampledata/emojis.json.
If your terminal doesn't display emojis, try one that does.
I recommend
.BR xfce4-terminal (1)
or
.BR gnome-terminal (1).
KDE's
.BR konsole (1)
is so-so, and plain old
.BR xterm (1)
is just bad.

.TP
explain test.cust
This examines
.B test.cust
(an array of objects)
to determine the names, data types, and other information about each member.
Basically this is the column information used by the "grid" table output method.

.SH FILES

.TP
~/.config/jsoncalc/
This directory stores JsonCalc's configuration.
It may also store temporary files such as caches and logs.

.TP
.IR PATH /lib plugin .so
Where
.I PATH
is a directory name from $JSONCALCPATH,
this is where a binary plugin may be found.

.TP
.IR PATH / plugin .jc
Where
.I PATH
is a directory name from $JSONCALCPATH,
this is where a script plugin may be found.

.SH ENVIRONMENT

.TP
$HOME
This is used to find the
.I ~/.config/jsoncalc
directory.

.TP
$JSONCALCPATH
This is a list of directories where JsonCalc's supporting files might be
found.
The default value is derived from $LDLIBRARYPATH.

.SH "SEE ALSO"
.BR json_calc (3),
.BR bash (1),
.BR xfce4-terminal (1),
.BR gnome-terminal (1)
.P
The home page for JsonCalc is
.US
http://www.jsoncalc.org/
.UE

.SH AUTHOR
Steve Kirkendall, kirkenda@gmail.com
